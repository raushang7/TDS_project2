
[2025-08-17 08:54:57]
âœ… duckdb already installed.
----------------------------------------

[2025-08-17 08:54:57]
âœ… pandas already installed.
----------------------------------------

[2025-08-17 08:54:57]
ðŸ“œ Executing Code:
import duckdb
import pandas as pd

# Connect to DuckDB
con = duckdb.connect(database=":memory:", read_only=False)

# Install and load necessary extensions
con.execute("INSTALL httpfs; LOAD httpfs;")
con.execute("INSTALL parquet; LOAD parquet;")

# Query to get the first 3 rows from the dataset
s3_path = "s3://indian-high-court-judgments/metadata/parquet/year=*/court=*/bench=*/metadata.parquet?s3_region=ap-south-1"
query = f"""SELECT * FROM read_parquet('{s3_path}') LIMIT 3;"""

df_preview = con.execute(query).fetchdf()

# Save the preview to metadata.txt
with open("uploads/82da3726-dbf8-4b37-9807-70dae2e02c14/metadata.txt", "w") as f:
    f.write("Data Preview:\n")
    f.write(df_preview.to_string())

print("Data preview saved to uploads/82da3726-dbf8-4b37-9807-70dae2e02c14/metadata.txt")

con.close()

----------------------------------------

[2025-08-17 08:55:02]
âœ… Code executed successfully:
Data preview saved to uploads/82da3726-dbf8-4b37-9807-70dae2e02c14/metadata.txt

----------------------------------------

[2025-08-17 08:55:52]
âœ… duckdb already installed.
----------------------------------------

[2025-08-17 08:55:52]
âœ… pandas already installed.
----------------------------------------

[2025-08-17 08:55:52]
âœ… scipy already installed.
----------------------------------------

[2025-08-17 08:55:53]
âœ… matplotlib already installed.
----------------------------------------

[2025-08-17 08:55:53]
âœ… seaborn already installed.
----------------------------------------

[2025-08-17 08:55:53]
ðŸ“¦ Installing Pillow ...
----------------------------------------

[2025-08-17 08:55:53]
ðŸ“œ Executing Code:
import duckdb
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
import json
from PIL import Image

# --- Setup ---
s3_path = "s3://indian-high-court-judgments/metadata/parquet/year=*/court=*/bench=*/metadata.parquet?s3_region=ap-south-1"
con = duckdb.connect(database=":memory:", read_only=False)
con.execute("INSTALL httpfs; LOAD httpfs;")
con.execute("INSTALL parquet; LOAD parquet;")

# --- Question 1: Which high court disposed the most cases from 2019 - 2022? ---
try:
    query1 = f"""
        SELECT court, COUNT(*) as case_count
        FROM read_parquet('{s3_path}')
        WHERE year >= 2019 AND year <= 2022
        GROUP BY court
        ORDER BY case_count DESC
        LIMIT 1;
    """
    most_active_court_df = con.execute(query1).fetchdf()
    most_active_court = (
        most_active_court_df["court"].iloc[0]
        if not most_active_court_df.empty
        else "N/A"
    )
except Exception as e:
    most_active_court = f"Error: {e}"

# --- Question 2 & 3: Regression for court '33_10' ---
try:
    query2 = f"""
        SELECT
            year,
            AVG(decision_date - TRY_STRPTIME(date_of_registration, '%d-%m-%Y')::DATE) as avg_delay_days
        FROM read_parquet('{s3_path}')
        WHERE court = '33_10'
          AND decision_date IS NOT NULL
          AND TRY_STRPTIME(date_of_registration, '%d-%m-%Y') IS NOT NULL
          AND (decision_date - TRY_STRPTIME(date_of_registration, '%d-%m-%Y')::DATE) >= 0
        GROUP BY year
        HAVING COUNT(*) > 10 -- Ensure year has enough data points to be stable
        ORDER BY year;
    """
    agg_delay_df = con.execute(query2).fetchdf()

    if (
        not agg_delay_df.empty
        and "avg_delay_days" in agg_delay_df.columns
        and len(agg_delay_df) > 1
    ):
        agg_delay_df.dropna(inplace=True)

        # Question 2: Calculate regression slope
        slope, intercept, r_value, p_value, std_err = stats.linregress(
            agg_delay_df["year"], agg_delay_df["avg_delay_days"]
        )
        regression_slope = slope

        # Question 3: Generate plot
        plt.figure(figsize=(6, 4))
        sns.regplot(x="year", y="avg_delay_days", data=agg_delay_df)
        plt.title("Avg Delay (Registration to Decision) for Court 33_10")
        plt.xlabel("Year")
        plt.ylabel("Average Delay (Days)")
        plt.tight_layout()

        # Save plot to buffer as PNG
        buf_png = io.BytesIO()
        plt.savefig(buf_png, format="png", dpi=90)
        plt.close()
        buf_png.seek(0)

        # Convert PNG to WEBP using Pillow to meet requirements and reduce size
        img = Image.open(buf_png)
        buf_webp = io.BytesIO()
        img.save(buf_webp, "webp", quality=80)
        buf_webp.seek(0)

        # Encode to base64 and create data URI
        img_base64 = base64.b64encode(buf_webp.read()).decode("utf-8")
        plot_data_uri = f"data:image/webp;base64,{img_base64}"

        if len(plot_data_uri) > 100000:
            plot_data_uri = "Plot size exceeds 100,000 characters limit."

    else:
        regression_slope = "Not enough data for regression"
        plot_data_uri = "Not enough data to plot"
except Exception as e:
    regression_slope = f"Error: {e}"
    plot_data_uri = f"Error: {e}"

con.close()

# --- Final JSON Output ---
final_answer = {
    "Which high court disposed the most cases from 2019 - 2022?": most_active_court,
    "What's the regression slope of the date_of_registration - decision_date by year in the court=33_10?": regression_slope,
    "Plot the year and # of days of delay from the above question as a scatterplot with a regression line. Encode as a base64 data URI under 100,000 characters": plot_data_uri,
}

# Save to result.json
with open("uploads/82da3726-dbf8-4b37-9807-70dae2e02c14/result.json", "w") as f:
    json.dump(final_answer, f, indent=2)

print(
    "Analysis complete. Results saved to uploads/82da3726-dbf8-4b37-9807-70dae2e02c14/result.json"
)

----------------------------------------

[2025-08-17 08:57:06]
âœ… Code executed successfully:
Analysis complete. Results saved to uploads/82da3726-dbf8-4b37-9807-70dae2e02c14/result.json

----------------------------------------

[2025-08-17 08:57:14]
ðŸ“œ Executing Code:
# The result is correct and in the expected format. No further action is needed.

----------------------------------------

[2025-08-17 08:57:14]
âœ… Code executed successfully:

----------------------------------------
