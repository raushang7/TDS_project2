
[2025-08-17 09:31:40]
‚úÖ pandas already installed.
----------------------------------------

[2025-08-17 09:31:40]
üìú Executing Code:
import pandas as pd

df = pd.read_csv("sample-sales.csv")
preview = df.head(3).to_string()

with open("uploads/3eb6dc36-e308-462a-b2ed-1d463685867a/metadata.txt", "a") as f:
    f.write("CSV Preview:\n")
    f.write(preview + "\n\n")

----------------------------------------

[2025-08-17 09:31:41]
‚ùå Execution error:
Traceback (most recent call last):
  File "/home/raushan/TDS_project2/uploads/3eb6dc36-e308-462a-b2ed-1d463685867a/job_/script.py", line 3, in <module>
    df = pd.read_csv('sample-sales.csv')
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/raushan/TDS_project2/venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py", line 1026, in read_csv
    return _read(filepath_or_buffer, kwds)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/raushan/TDS_project2/venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py", line 620, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/raushan/TDS_project2/venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py", line 1620, in __init__
    self._engine = self._make_engine(f, self.engine)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/raushan/TDS_project2/venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py", line 1880, in _make_engine
    self.handles = get_handle(
                   ^^^^^^^^^^^
  File "/home/raushan/TDS_project2/venv/lib/python3.12/site-packages/pandas/io/common.py", line 873, in get_handle
    handle = open(
             ^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'sample-sales.csv'

----------------------------------------

[2025-08-17 09:31:46]
‚úÖ pandas already installed.
----------------------------------------

[2025-08-17 09:31:46]
üìú Executing Code:
import pandas as pd

df = pd.read_csv("uploads/3eb6dc36-e308-462a-b2ed-1d463685867a/sample-sales.csv")
preview = df.head(3).to_string()

with open("uploads/3eb6dc36-e308-462a-b2ed-1d463685867a/metadata.txt", "a") as f:
    f.write("CSV Preview:\n")
    f.write(preview + "\n\n")

----------------------------------------

[2025-08-17 09:31:46]
‚úÖ Code executed successfully:

----------------------------------------

[2025-08-17 09:32:03]
‚úÖ pandas already installed.
----------------------------------------

[2025-08-17 09:32:03]
‚úÖ matplotlib already installed.
----------------------------------------

[2025-08-17 09:32:03]
üìú Executing Code:
import pandas as pd
import matplotlib.pyplot as plt
import io
import base64
import json

# Load the dataset
df = pd.read_csv("uploads/3eb6dc36-e308-462a-b2ed-1d463685867a/sample-sales.csv")

# Ensure date column is in datetime format
df["date"] = pd.to_datetime(df["date"])

# 1. Calculate total sales
total_sales = df["sales"].sum()

# 2. Find the region with the highest total sales
top_region = df.groupby("region")["sales"].sum().idxmax()

# 3. Calculate the correlation between day of month and sales
df["day_of_month"] = df["date"].dt.day
day_sales_correlation = df["day_of_month"].corr(df["sales"])

# 4. Plot total sales by region as a bar chart
plt.figure(figsize=(8, 5))
sales_by_region = df.groupby("region")["sales"].sum()
sales_by_region.plot(kind="bar", color="blue")
plt.title("Total Sales by Region")
plt.ylabel("Total Sales")
plt.xlabel("Region")
plt.tight_layout()

buf_bar = io.BytesIO()
plt.savefig(buf_bar, format="png")
plt.close()
buf_bar.seek(0)
bar_chart_base64 = base64.b64encode(buf_bar.read()).decode("utf-8")

# 5. Calculate the median sales amount
median_sales = df["sales"].median()

# 6. Calculate total sales tax (10% rate)
total_sales_tax = total_sales * 0.10

# 7. Plot cumulative sales over time
df_sorted = df.sort_values("date")
df_sorted["cumulative_sales"] = df_sorted["sales"].cumsum()

plt.figure(figsize=(10, 5))
plt.plot(df_sorted["date"], df_sorted["cumulative_sales"], color="red")
plt.title("Cumulative Sales Over Time")
plt.xlabel("Date")
plt.ylabel("Cumulative Sales")
plt.tight_layout()

buf_line = io.BytesIO()
plt.savefig(buf_line, format="png")
plt.close()
buf_line.seek(0)
cumulative_chart_base64 = base64.b64encode(buf_line.read()).decode("utf-8")

# Create the final JSON object
result = {
    "total_sales": float(total_sales),
    "top_region": top_region,
    "day_sales_correlation": day_sales_correlation,
    "bar_chart": bar_chart_base64,
    "median_sales": float(median_sales),
    "total_sales_tax": float(total_sales_tax),
    "cumulative_sales_chart": cumulative_chart_base64,
}

# Save the result to a JSON file
with open("uploads/3eb6dc36-e308-462a-b2ed-1d463685867a/result.json", "w") as f:
    json.dump(result, f, indent=4)

----------------------------------------

[2025-08-17 09:32:04]
‚úÖ Code executed successfully:

----------------------------------------

[2025-08-17 09:32:14]
üìú Executing Code:

----------------------------------------

[2025-08-17 09:32:14]
‚úÖ Code executed successfully:

----------------------------------------
